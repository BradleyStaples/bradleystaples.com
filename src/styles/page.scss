@use "sass:math";

$blue: #2396d1;
$brown: #6a470b;
$orange: #da7f09;
$beige: #eaebe5;
$white: #fff;
$smallFontSize: 18px;
$largeFontSize: 24px;

$breakpoints: (
    phone_small: 320px,
    phone_medium: 480px,
    phone_large: 568px,
    tablet_small: 667px,
    tablet_medium: 768px,
    tablet_large: 900px,
    desktop_small: 1000px,
    desktop_medium: 1200px,
    desktop_large: 1400px
);

$directions: (
    '<': max-width,
    '<=': max-width,
    '>': min-width,
    '>=': min-width,
    between: between
);

@function rem($value, $parent: $largeFontSize) {
  $value: math.div($value, $parent) * 1rem;
  @if ($value == 0rem) { $value: 0; } // Turn 0rem into 0
  @return $value;
}

@function getBreakpointSize($direction, $breakpoint) {
    $bp: map-get($breakpoints, $breakpoint);

    @if $bp == null {
        // allow numeric breakpoints values for unusual cases
        @return $breakpoint;
    }

    @if $direction == '<' {
        @return $bp - 1;
    } @else if $direction == '>' {
        @return $bp + 1;
    } @else {
        @return $bp;
    }
}

// directions:
// under is exclusive, under_or_equal is inclusive with $breakpoing
// over is exclusive, over_or_equal is inclusive with $breakpoing
// between is inclusive on both ends
@mixin responsive($direction, $breakpoint, $breakpoint2: null) {
    $bp: getBreakpointSize($direction, $breakpoint);
    $bp2: getBreakpointSize($direction, $breakpoint2);
    $dir: map-get($directions, $direction);

    @if $dir == null {
        @warn 'missing direction "#{$direction}"';
    } @else {
        @if $dir == 'between' and $bp2 != null {
            @media only screen and (min-width: $bp) and (max-width: $bp2) {
                @content;
            }
        } @else {
            @media only screen and ($dir: $bp) {
                @content;
            }
        }
    }
}

html {
 box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

html,
body {
  font-size: $smallFontSize;
  line-height: smallFontSize + 6;
  font-family: 'Helvetica Neue', Helvetica, Arial;
  color: $brown;

  @include responsive('>=', 'phone_large') {
    font-size: $largeFontSize;
    line-height: $largeFontSize + 6;
  }
}

body {
  background-color: $beige;
}

img {
  max-width: 100%;
}

a {
  color: $blue;
  text-decoration: none;
  border-bottom: 2px dotted transparent;
  transition: all 0.5s;

  &:hover {
    text-decoration: none;
    color: lighten($blue, 20%);
    border-bottom: 2px dotted lighten($blue, 20%);
  }
}

li {
  line-height: normal;
}

h1 {
  margin: 0;
  padding: 0;
  font-size: rem(30px, $smallFontSize);
  line-height: rem(36px, $smallFontSize);
  text-align: center;
  color: darken($blue, 10%);
  text-shadow: -3px -3px 0 $white,
    3px -3px 0 $white,
    -3px 3px 0 $white,
    3px 3px 0 $white;

  @include responsive('>=', 'phone_large') {
    font-size: rem(54px);
    line-height: rem(60px);
  }
}

h2 {
  font-size: rem(24px, $smallFontSize);
  line-height: rem(30px, $smallFontSize);
  text-align: center;
  color: darken($blue, 10%);

  @include responsive('>=', 'phone_large') {
    font-size: rem(44px);
    line-height: rem(50px);
  }
}

h3 {
  font-size: rem(18px, $smallFontSize);
  line-height: rem(24px, $smallFontSize);

  @include responsive('>=', 'phone_large') {
    font-size: rem(36px);
    line-height: rem(42px);
  }
}

hr {
  height: 0;
  border-top: 1px solid lighten($orange, 10%);
  border-bottom: 1px solid darken($orange, 5%);
}

::selection {
  background: lighten($blue, 20%);
  color: $brown;
  text-shadow: 2px 1px 0 rgba($white, 0.5);
}

.page-wrapper {
  @include responsive('>=', 'phone_large') {
    width: 80%;
    max-width: rem(1000px);
    margin: rem(48px) auto;
  }
}

.contents-wrapper {
  margin: rem(30px, $smallFontSize) auto 0 auto;
  min-height: rem(300px, $smallFontSize);
  background-color: rgba($white, 0.75);
  border-radius: 12px;
  border: 6px solid $white;
  box-shadow: 0 0 8px rgba(0,0,0,0.2);
  padding: 6px;

  @include responsive('>=', 'phone_large') {
    padding: 6px 24px;
  }
}

.navigation {
  margin: 0 auto;
  padding: 0;
  text-align: center;
  list-style: none;
  width: rem(275px, $smallFontSize);

  ul {
    padding: 0;
  }

  & li {
    display: inline-block;
    list-style: none;
  }

  & li + li {
    margin-left: rem(18px, $smallFontSize);

    @include responsive('>=', 'phone_large') {
      margin-left: rem(24px);
    }
  }

  a.active {
    border-bottom: 2px solid lighten($blue, 20%);
    font-weight: bold;
  }

  a.active:hover {
    border-bottom-style: dotted;
  }

  @include responsive('>', 'tablet_small') {
    width: 100%;
  }
}

.content-404 {
  margin: 0 auto rem(40px, $smallFontSize) auto;
  text-align: center;

  @include responsive('>=', 'phone_large') {
    margin-bottom: rem(40px);
  }
}
